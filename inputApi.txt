import com.amazonaws.services.dynamodbv2.AmazonDynamoDB
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder
import com.amazonaws.services.dynamodbv2.document.DynamoDB
import com.amazonaws.services.dynamodbv2.document.PutItemOutcome
import com.amazonaws.services.dynamodbv2.document.Table
import com.amazonaws.services.dynamodbv2.document.Item
import com.amazonaws.services.lambda.runtime.RequestStreamHandler
import com.amazonaws.services.lambda.runtime.Context
import com.google.gson.Gson
import java.io.BufferedReader
import java.io.InputStream
import java.io.InputStreamReader
import java.io.OutputStream
import java.nio.charset.Charset

class InputApi : RequestStreamHandler {

    override fun handleRequest(inputStream: InputStream, outputStream: OutputStream, context: Context) {
        val reader = BufferedReader(InputStreamReader(inputStream, Charset.forName("US-ASCII")))
        val data = Gson().fromJson(reader, ResponseFromAPI::class.java)
        println(data)
        val res = Gson().fromJson(data.body, Dynamo::class.java)
        println(res.Id)
        println(res.Name)
        val client: AmazonDynamoDB = AmazonDynamoDBClientBuilder.defaultClient()
        val dynamoDB = DynamoDB(client)
        val table: Table = dynamoDB.getTable("lambdaApiV2")
        val item: Item = Item()
            .withPrimaryKey("Id", res.Id)
            .withString("Name",res.Name)
        val outcome: PutItemOutcome = table.putItem(item)
        println("Created Succesfully")

    }
}

data class Dynamo(
    val Id: String,
    val Name: String
)



